{"version":3,"sources":["components/Main.js","serviceWorker.js","index.js"],"names":["document","body","style","grade","physics","getElementById","value","chemistry","maths","computer","total","parseFloat","percentage","result","alert","length","innerHTML","Main","className","Jumbotron","Row","Col","lg","md","sm","Form","Input","type","id","placeholder","Button","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9588c4b5.chunk.js","sourcesContent":["import React from \"react\";\nimport { Jumbotron, Input, Row, Col, Button, Form } from 'reactstrap';\nimport \"./main.css\";\n\ndocument.body.style = 'background-color: #27c5b6;';\nlet grade = () => {\n    let physics = document.getElementById('physics').value;\n    let chemistry = document.getElementById('chemistry').value;\n    let maths = document.getElementById('maths').value;\n    let computer = document.getElementById('web-programming').value;\n    let total = parseFloat(physics) + parseFloat(chemistry) + parseFloat(maths) + parseFloat(computer);\n    let percentage = total / 400 * 100;\n    let grade = \"\";\n    let result = \"\";\n    \n    if (percentage <= 100 && percentage >= 90) {\n        grade = 'A+';\n    } else if (percentage < 90 && percentage >= 80) {\n        grade = 'A';\n    } else if (percentage < 80 && percentage >= 70) {\n        grade = 'B+';\n    } else if (percentage < 70 && percentage >= 60) {\n        grade = 'B';\n    } else if (percentage < 60 && percentage >= 50) {\n        grade = 'C+';\n    } else if (percentage < 50 && percentage > 40) {\n        grade = 'C';\n    } else if (percentage <= 40) {\n        grade = 'F';\n    }\n\n    if (grade == 'F') {\n        result = 'Fail';\n    }\n\n    if (grade == 'A+' || grade == 'A' || grade == 'B+' || grade == 'B' || grade == 'C+' || grade == 'C') {\n        result = 'Pass';\n    }\n\n    if (physics == \"\" || chemistry == \"\" || maths == \"\" || computer == \"\") {\n        alert('Please Enter The Marks of Subject');\n    }\n\n    if ((physics.length < 3 && physics.length > 0 || physics == 100) && (chemistry.length < 3 && chemistry.length > 0 || chemistry == 100) && (maths.length < 3 && maths.length > 0 || maths == 100) && (computer.length < 3 && computer.length > 0 || computer == 100)) {\n        document.getElementById('result').innerHTML = `Out Of 400 Your Total is ${total} and Percentage is ${percentage}. Your Grade is ${grade} and You Are ${result}.`\n    }\n\n    if (physics.length > 2) {\n        document.getElementById('phys').innerHTML = `Please Enter the Marks Between 1 to 100`\n    }\n    if (chemistry.length > 2) {\n        document.getElementById('chem').innerHTML = `Please Enter the Marks Between 1 to 100`\n    }\n    if (maths.length > 2) {\n        document.getElementById('math').innerHTML = `Please Enter the Marks Between 1 to 100`\n    }\n    if (computer.length > 2) {\n        document.getElementById('web').innerHTML = `Please Enter the Marks Between 1 to 100`\n    }\n\n\n\n\n\n\n\n\n\n\n}\n\nconst Main = () => {\n    return (\n        <div className=\"main-area\">\n            <Jumbotron className=\"jumbotron\">\n                <Row className=\"row\">\n                    <Col lg=\"6\" md=\"6\" sm=\"12\" className=\"text-area\">\n                        <ul><li>S</li><li>T</li><li>U</li><li>D</li><li>E</li><li>N</li><li>T</li></ul>\n                        <ul><li>G</li><li>R</li><li>A</li><li>D</li><li>E</li></ul>\n                        <ul><li>C</li><li>A</li><li>L</li><li>C</li><li>U</li><li>L</li><li>A</li><li>T</li><li>O</li><li>R</li></ul>\n                    </Col>\n                    <Col lg=\"6\" md=\"6\" sm=\"12\" className=\"input-area\">\n                        <Form>\n                            <div className=\"form-group\">\n                                <Input type=\"number\" id=\"physics\" className=\"form-control shadow-none\" placeholder=\"Physics\"></Input>\n                                <Row><span id=\"phys\"></span></Row>\n                            </div>\n                            <div className=\"form-group\">\n                                <Input type=\"number\" id=\"chemistry\" className=\"form-control shadow-none\" placeholder=\"Chemistry\"></Input>\n                                <Row><span id=\"chem\"></span></Row>\n                            </div>\n                            <div className=\"form-group\">\n                                <Input type=\"number\" id=\"maths\" className=\"form-control shadow-none\" placeholder=\"Maths\"></Input>\n                                <Row><span id=\"math\"></span></Row>\n                            </div>\n                            <div className=\"form-group\">\n                                <Input type=\"number\" id=\"web-programming\" className=\"form-control shadow-none\" placeholder=\"Web Programming\"></Input>\n                                <Row><span id=\"web\"></span></Row>\n                            </div>\n                            <Button className=\"btn shadow-none\" onClick={grade}>Show Percentage</Button>\n                        </Form>\n                    </Col>\n                </Row>\n                <p id=\"result\">This Grade Calculator will Find Out Your Total Marks, Percentage & Grade with Final Result.</p>\n            </Jumbotron>\n        </div>\n    );\n}\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './components/Main';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}